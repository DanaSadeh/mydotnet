using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace home_work_12_10_19
{
    class Program
    {
        static void Main(string[] args)
        {
            /*         Console.WriteLine("exercise #1: ");
                     Console.WriteLine(Abs(-3));
                     Console.WriteLine("exercise #2: ");
                     Console.WriteLine(Distance(8,10));
                     Console.WriteLine("exercise #3a: ");
                     Console.WriteLine(Distance2(18, 10)); 
                     Console.WriteLine("exercise #3b: ");
                     Console.WriteLine(Product(0,10));
            Console.WriteLine("exercise #3c: ");
            Console.WriteLine(quotient(0, 44));
            

            Console.WriteLine("exercise #3d: ");
            Console.WriteLine(Remainder(8, 6));
            

            Console.WriteLine("exercise 4: ");
            Console.WriteLine(Power(0, 3));
            


            Console.WriteLine("exercise 5: ");
            Console.WriteLine(PowerR(3,2));
            


            Console.WriteLine("exercise 6: ");
            Console.WriteLine(ProductR(20, 3));
            



            Console.WriteLine("exercise 7a: ");
            Console.WriteLine(SumDigits(023));
            */


            Console.WriteLine("exercise 7b: ");
            Console.WriteLine(ReverseNum(69));
            Console.WriteLine(ReverseNum(96));
            Console.WriteLine(ReverseNum(123));
            Console.WriteLine(ReverseNum(465));
            Console.WriteLine(ReverseNum(120));

        }

        static int ReverseNum(int x)
        {

            if (x > 0 && x < 10)
            {
                return x;
            }
            else
            if (x >= 10 && x < 100)
            {
                string newNum = x % 10 + "" + x / 10;
                return Convert.ToInt32(newNum);
            }
            else
            if (x >= 100 && x < 1000)
            {
                string newNum = x % 10 + "" + (x % 100) / 10 + "" + x / 100;
                return Convert.ToInt32(newNum);

                
            }

            if (x == 0)
                return 0;

            return -1;

        }

        static int BiggerDigit(int x)
        {

            if (x > 0 && x < 10)
            {
                return x;
            }
            else
            if (x >= 10 && x < 100)
            {
                if (x / 10 > x % 10)
                {
                    return x / 10;
                }

                return x % 10;
            }
            else
            if (x >= 100 && x < 1000)
            {
                if (x % 10 > (x % 100) / 10 && x % 10 > x / 100)
                {
                    return x % 10;
                }
                else if ((x % 100) / 10 > x % 10 && (x % 100) / 10 > x / 100)
                {
                    return (x % 100) / 10;
                }
                return x / 100;


            }

            if (x == 0)
                return 0;

            return -1;

        }


        static int SumDigits(int x)
        {
            if (x > 0 && x < 10)
            {
                return x;
            }
            else
            if (x >= 10 && x < 100)
            {

                return x / 10 + x % 10;
            }
            else
            if (x >= 100 && x < 1000)
            {
                return x % 10 + (x % 100) / 10 + x / 100;
            }

            if (x == 0)
                return 0;

            return -1;
        }
        static int ProductR(int x, int y)
        {
            if (x == 0)
            {
                return 0;
            }


            if (y == 0 || x == 1)
                return 0;

            return ProductR(x, y - 1) + x;
        }
        static int PowerR(int x, int y)
        {
            if (y == 0 || x == 1)
                return 1;
            if (x == 0)
            {
                if (y == 0)
                {
                    return 0;
                }
                return -1;
            }

            return PowerR(x, y - 1) * x;
        }

        static int Power(int x, int y)
        {
            int result = 1;
            if (y == 0)
            {
                return -1;
            }
            if (x == 0)
                return 0;

            for (int i = 0; i < y; i++)
            {

                result *= x;
            }

            return result;
        }


        static int Remainder(int x, int y)
        { /*
            if (y == 0)
                return -1;

            if (x<y)
            {
                return x;
            }

            int i = 0;
            int result = y;

            for ( i = 0; result <= x; i++)
            {
                result += y;
            }
            int counter = 0;
            while(result-y<x)
            {
                result++;
                counter++;
            }

            return counter; */


            return Distance(x, Product(quotient(x, y), y));

        }

        static int quotient(int x, int y)
        {

            int result = y;
            int i = 0;

            if (y == 0)
                return -1;

            if (y < x)
            {
                for (i = 0; result <= x; i++)
                {
                    result += y;

                }
            }

            return i;
        }


        static int Product(int x, int y)
        {

            int big = x;
            int small = y;


            if (x < y)
            {
                big = y;
                small = x;
            }

            if (x == 0 || y == 0)
            {
                return 0;
            }


            int result = 0;
            for (int i = 0; i < big; i++)
            {

                result += small;

            }

            return result;
        }



        static int Abs(int x)
        {
            return x < 0 ? -x : x;
        }


        static int Distance(int x, int y)
        {
            int big = x;
            int small = y;

            if (x < y)
            {
                big = y;
                small = x;
            }

            return big - small;

        }

        static int Distance2(int x, int y)
        {
            int big = x;
            int small = y;

            if (x < y)
            {
                big = y;
                small = x;
            }
            int i = 0;
            for (i = 0; small < big; i++)
            {
                small++;

            }

            return i;

        }









    }
}
